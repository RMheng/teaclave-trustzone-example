{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2","program":"/home/ruanwenwen/.rustup/toolchains/nightly-2019-07-08-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","uuid","/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=400207aca5f455be","-C","extra-filename=-400207aca5f455be","--out-dir","/home/ruanwenwen/rww/incubator-teaclave-trustzone-sdk/examples/hello_world/proto/target/rls/debug/deps","-L","dependency=/home/ruanwenwen/rww/incubator-teaclave-trustzone-sdk/examples/hello_world/proto/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/ruanwenwen/.rustup/toolchains/nightly-2019-07-08-x86_64-unknown-linux-gnu"],"output":"/home/ruanwenwen/rww/incubator-teaclave-trustzone-sdk/examples/hello_world/proto/target/rls/debug/deps/libuuid-400207aca5f455be.rmeta"},"prelude":{"crate_id":{"name":"uuid","disambiguator":[6504003309393631107,15317158299179830990]},"crate_root":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src","external_crates":[{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[15648154756269929163,2527934204323884945]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[1065492408275733805,8735646992390138869]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10557886864371041312,8495262259671514006]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[12936493656212496516,14621060282648963030]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5092655991131971619,6658026285825554697]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5840345805660290927,17704297939702144674]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4452688740915366047,5499185753999847807]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13768387445758482053,7930477095376553370]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[11872957849793985719,17447541214584326144]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11913524530068197846,3506186141796690855]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[15567958409463040371,5057412060405713055]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17785035648544575872,7274233584647191103]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[4266274413393493433,17303755687401852434]}},{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[8712640170019436614,12734763714727757705]}}],"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":492,"byte_end":33188,"line_start":12,"line_end":1070,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":235},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":6154,"byte_end":6159,"line_start":200,"line_end":200,"column_start":23,"column_end":28},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":492,"byte_end":33188,"line_start":12,"line_end":1070,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":56},{"krate":0,"index":72},{"krate":0,"index":98},{"krate":0,"index":106},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":179},{"krate":0,"index":599},{"krate":0,"index":618},{"krate":0,"index":617},{"krate":0,"index":615},{"krate":0,"index":613},{"krate":0,"index":620},{"krate":0,"index":635},{"krate":0,"index":634},{"krate":0,"index":632},{"krate":0,"index":630},{"krate":0,"index":637},{"krate":0,"index":657},{"krate":0,"index":656},{"krate":0,"index":654},{"krate":0,"index":651},{"krate":0,"index":649},{"krate":0,"index":646},{"krate":0,"index":640},{"krate":0,"index":181},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":218}],"decl_id":null,"docs":" Generate and parse UUIDs.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":4592,"byte_end":4602,"line_start":128,"line_end":128,"column_start":1,"column_end":11}},{"value":"deny(missing_debug_implementations, missing_docs)","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":4604,"byte_end":4657,"line_start":129,"line_end":129,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":34440,"byte_end":34443,"line_start":43,"line_end":43,"column_start":18,"column_end":21},"name":"nil","qualname":"<Uuid>::nil","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The 'nil UUID'.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":35165,"byte_end":35176,"line_start":70,"line_end":70,"column_start":12,"column_end":23},"name":"from_fields","qualname":"<Uuid>::from_fields","value":"fn (d1: u32, d2: u16, d3: u16, d4: &[u8]) -> Result<Uuid, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID from four field values in big-endian order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":36608,"byte_end":36622,"line_start":127,"line_end":127,"column_start":12,"column_end":26},"name":"from_fields_le","qualname":"<Uuid>::from_fields_le","value":"fn (d1: u32, d2: u16, d3: u16, d4: &[u8]) -> Result<Uuid, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID from four field values in little-endian order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":37408,"byte_end":37417,"line_start":162,"line_end":162,"column_start":18,"column_end":27},"name":"from_u128","qualname":"<Uuid>::from_u128","value":"fn (v: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID from a 128bit value in big-endian order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":38046,"byte_end":38058,"line_start":184,"line_end":184,"column_start":18,"column_end":30},"name":"from_u128_le","qualname":"<Uuid>::from_u128_le","value":"fn (v: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID from a 128bit value in little-endian order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":39556,"byte_end":39566,"line_start":240,"line_end":240,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Uuid>::from_slice","value":"fn (b: &[u8]) -> Result<Uuid, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID using the supplied big-endian bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":39971,"byte_end":39981,"line_start":255,"line_end":255,"column_start":18,"column_end":28},"name":"from_bytes","qualname":"<Uuid>::from_bytes","value":"fn (bytes: Bytes) -> Uuid","parent":null,"children":[],"decl_id":null,"docs":" Creates a UUID using the supplied big-endian bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":41496,"byte_end":41506,"line_start":311,"line_end":311,"column_start":18,"column_end":28},"name":"from_bytes","qualname":"<crate::Builder>::from_bytes","value":"fn (b: Bytes) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` using the supplied big-endian bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":42509,"byte_end":42519,"line_start":347,"line_end":347,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<crate::Builder>::from_slice","value":"fn (b: &[u8]) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` using the supplied big-endian bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":43742,"byte_end":43753,"line_start":393,"line_end":393,"column_start":12,"column_end":23},"name":"from_fields","qualname":"<crate::Builder>::from_fields","value":"fn (d1: u32, d2: u16, d3: u16, d4: &[u8]) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` from four big-endian field values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":44110,"byte_end":44119,"line_start":407,"line_end":407,"column_start":12,"column_end":21},"name":"from_u128","qualname":"<crate::Builder>::from_u128","value":"fn (v: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` from a big-endian 128bit value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":44621,"byte_end":44624,"line_start":427,"line_end":427,"column_start":18,"column_end":21},"name":"nil","qualname":"<crate::Builder>::nil","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Builder` with an initial [`Uuid::nil`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":44728,"byte_end":44739,"line_start":432,"line_end":432,"column_start":12,"column_end":23},"name":"set_variant","qualname":"<crate::Builder>::set_variant","value":"fn (&mut self, v: crate::Variant) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the variant of the UUID.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":45185,"byte_end":45196,"line_start":446,"line_end":446,"column_start":12,"column_end":23},"name":"set_version","qualname":"<crate::Builder>::set_version","value":"fn (&mut self, v: crate::Version) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the version number of the UUID.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":45756,"byte_end":45761,"line_start":470,"line_end":470,"column_start":12,"column_end":17},"name":"build","qualname":"<crate::Builder>::build","value":"fn (&mut self) -> Uuid","parent":null,"children":[],"decl_id":null,"docs":" Hands over the internal constructed [`Uuid`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":235},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":47204,"byte_end":47209,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" A general error that can occur when working with UUIDs.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":47193,"byte_end":47217,"line_start":8,"line_end":8,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs","byte_start":50743,"byte_end":50752,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"parse_str","qualname":"<Uuid>::parse_str","value":"fn (mut input: &str) -> Result<Uuid, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Parses a `Uuid` from a string of hexadecimal digits with optional\n hyphens.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":106},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::adapter","value":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":345},{"krate":0,"index":369},{"krate":0,"index":368},{"krate":0,"index":366},{"krate":0,"index":364},{"krate":0,"index":362},{"krate":0,"index":359},{"krate":0,"index":357},{"krate":0,"index":354},{"krate":0,"index":348},{"krate":0,"index":371},{"krate":0,"index":401},{"krate":0,"index":399},{"krate":0,"index":396},{"krate":0,"index":393},{"krate":0,"index":389},{"krate":0,"index":386},{"krate":0,"index":382},{"krate":0,"index":375},{"krate":0,"index":404},{"krate":0,"index":428},{"krate":0,"index":427},{"krate":0,"index":425},{"krate":0,"index":423},{"krate":0,"index":421},{"krate":0,"index":418},{"krate":0,"index":416},{"krate":0,"index":413},{"krate":0,"index":407},{"krate":0,"index":430},{"krate":0,"index":460},{"krate":0,"index":458},{"krate":0,"index":455},{"krate":0,"index":452},{"krate":0,"index":448},{"krate":0,"index":445},{"krate":0,"index":441},{"krate":0,"index":434},{"krate":0,"index":463},{"krate":0,"index":487},{"krate":0,"index":486},{"krate":0,"index":484},{"krate":0,"index":482},{"krate":0,"index":480},{"krate":0,"index":477},{"krate":0,"index":475},{"krate":0,"index":472},{"krate":0,"index":466},{"krate":0,"index":489},{"krate":0,"index":519},{"krate":0,"index":517},{"krate":0,"index":514},{"krate":0,"index":511},{"krate":0,"index":507},{"krate":0,"index":504},{"krate":0,"index":500},{"krate":0,"index":493},{"krate":0,"index":111},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":135},{"krate":0,"index":143},{"krate":0,"index":150},{"krate":0,"index":158},{"krate":0,"index":165},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":579},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":537},{"krate":0,"index":581},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":584},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":556},{"krate":0,"index":586},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":589},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":575},{"krate":0,"index":591}],"decl_id":null,"docs":" Adapters for various formats for UUIDs\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":345},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72047,"byte_end":72057,"line_start":26,"line_end":26,"column_start":12,"column_end":22},"name":"Hyphenated","qualname":"::adapter::Hyphenated","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a hyphenated string.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72036,"byte_end":72064,"line_start":26,"line_end":26,"column_start":1,"column_end":29}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72036,"byte_end":72064,"line_start":26,"line_end":26,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72300,"byte_end":72313,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"HyphenatedRef","qualname":"::adapter::HyphenatedRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a hyphenated string.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72289,"byte_end":72328,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72289,"byte_end":72328,"line_start":34,"line_end":34,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":404},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72575,"byte_end":72581,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"Simple","qualname":"::adapter::Simple","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a simple string.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72564,"byte_end":72588,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72564,"byte_end":72588,"line_start":42,"line_end":42,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":430},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72820,"byte_end":72829,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"SimpleRef","qualname":"::adapter::SimpleRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a simple string.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72809,"byte_end":72844,"line_start":50,"line_end":50,"column_start":1,"column_end":36}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":72809,"byte_end":72844,"line_start":50,"line_end":50,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":463},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73088,"byte_end":73091,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"Urn","qualname":"::adapter::Urn","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a URN string.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73077,"byte_end":73098,"line_start":58,"line_end":58,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73077,"byte_end":73098,"line_start":58,"line_end":58,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":489},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73327,"byte_end":73333,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"UrnRef","qualname":"::adapter::UrnRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An adaptor for formatting an [`Uuid`] as a URN string.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73316,"byte_end":73348,"line_start":66,"line_end":66,"column_start":1,"column_end":33}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73316,"byte_end":73348,"line_start":66,"line_end":66,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73503,"byte_end":73516,"line_start":73,"line_end":73,"column_start":18,"column_end":31},"name":"to_hyphenated","qualname":"<Uuid>::to_hyphenated","value":"fn (self) -> Hyphenated","parent":null,"children":[],"decl_id":null,"docs":" Get a [`Hyphenated`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73475,"byte_end":73484,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73742,"byte_end":73759,"line_start":81,"line_end":81,"column_start":18,"column_end":35},"name":"to_hyphenated_ref","qualname":"<Uuid>::to_hyphenated_ref","value":"fn (&self) -> HyphenatedRef<'_>","parent":null,"children":[],"decl_id":null,"docs":" Get a borrowed [`HyphenatedRef`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73714,"byte_end":73723,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73970,"byte_end":73979,"line_start":89,"line_end":89,"column_start":18,"column_end":27},"name":"to_simple","qualname":"<Uuid>::to_simple","value":"fn (self) -> Simple","parent":null,"children":[],"decl_id":null,"docs":" Get a [`Simple`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73942,"byte_end":73951,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":74185,"byte_end":74198,"line_start":97,"line_end":97,"column_start":18,"column_end":31},"name":"to_simple_ref","qualname":"<Uuid>::to_simple_ref","value":"fn (&self) -> SimpleRef<'_>","parent":null,"children":[],"decl_id":null,"docs":" Get a borrowed [`SimpleRef`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":74157,"byte_end":74166,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":74431,"byte_end":74437,"line_start":106,"line_end":106,"column_start":18,"column_end":24},"name":"to_urn","qualname":"<Uuid>::to_urn","value":"fn (self) -> Urn","parent":null,"children":[],"decl_id":null,"docs":" Get a [`Urn`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":74403,"byte_end":74412,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":74667,"byte_end":74677,"line_start":115,"line_end":115,"column_start":18,"column_end":28},"name":"to_urn_ref","qualname":"<Uuid>::to_urn_ref","value":"fn (&self) -> UrnRef<'_>","parent":null,"children":[],"decl_id":null,"docs":" Get a borrowed [`UrnRef`] formatter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":74639,"byte_end":74648,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":129},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":77061,"byte_end":77067,"line_start":185,"line_end":185,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::Hyphenated::LENGTH","value":"usize","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" The length of a hyphenated [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":77248,"byte_end":77257,"line_start":191,"line_end":191,"column_start":18,"column_end":27},"name":"from_uuid","qualname":"<Hyphenated>::from_uuid","value":"fn (uuid: Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Hyphenated`] from a [`Uuid`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":78930,"byte_end":78942,"line_start":241,"line_end":241,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<Hyphenated>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case hyphenated string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":80673,"byte_end":80685,"line_start":291,"line_end":291,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<Hyphenated>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case hyphenated string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":137},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":80948,"byte_end":80954,"line_start":300,"line_end":300,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::HyphenatedRef::<'a>::LENGTH","value":"usize","parent":{"krate":0,"index":135},"children":[],"decl_id":null,"docs":" The length of a hyphenated [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":81154,"byte_end":81167,"line_start":306,"line_end":306,"column_start":18,"column_end":31},"name":"from_uuid_ref","qualname":"<HyphenatedRef>::from_uuid_ref","value":"fn (uuid: &'a Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`HyphenatedRef`] from a [`Uuid`] reference.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":83011,"byte_end":83023,"line_start":360,"line_end":360,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<HyphenatedRef>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case hyphenated string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":84854,"byte_end":84866,"line_start":413,"line_end":413,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<HyphenatedRef>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case hyphenated string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":144},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":85109,"byte_end":85115,"line_start":422,"line_end":422,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::Simple::LENGTH","value":"usize","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" The length of a simple [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":85284,"byte_end":85293,"line_start":428,"line_end":428,"column_start":18,"column_end":27},"name":"from_uuid","qualname":"<Simple>::from_uuid","value":"fn (uuid: Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Simple`] from a [`Uuid`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":87008,"byte_end":87020,"line_start":479,"line_end":479,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<Simple>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case simple string to `buffer`,\n and returns the subslice of the buffer that contains the encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":88629,"byte_end":88641,"line_start":526,"line_end":526,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<Simple>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case simple string to `buffer`,\n and returns the subslice of the buffer that contains the encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":88897,"byte_end":88903,"line_start":535,"line_end":535,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::SimpleRef::<'a>::LENGTH","value":"usize","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":" The length of a simple [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":89091,"byte_end":89104,"line_start":541,"line_end":541,"column_start":18,"column_end":31},"name":"from_uuid_ref","qualname":"<SimpleRef>::from_uuid_ref","value":"fn (uuid: &'a Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`SimpleRef`] from a [`Uuid`] reference.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":90826,"byte_end":90838,"line_start":592,"line_end":592,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<SimpleRef>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case simple string to `buffer`,\n and returns the subslice of the buffer that contains the encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":92446,"byte_end":92458,"line_start":639,"line_end":639,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<SimpleRef>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case simple string to `buffer`,\n and returns the subslice of the buffer that contains the encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":92696,"byte_end":92702,"line_start":648,"line_end":648,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::Urn::LENGTH","value":"usize","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The length of a URN [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":92862,"byte_end":92871,"line_start":654,"line_end":654,"column_start":18,"column_end":27},"name":"from_uuid","qualname":"<Urn>::from_uuid","value":"fn (uuid: Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Urn`] from a [`Uuid`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":94678,"byte_end":94690,"line_start":707,"line_end":707,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<Urn>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case URN string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":96558,"byte_end":96570,"line_start":760,"line_end":760,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<Urn>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case URN string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":167},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":96871,"byte_end":96877,"line_start":770,"line_end":770,"column_start":15,"column_end":21},"name":"LENGTH","qualname":"::adapter::UrnRef::<'a>::LENGTH","value":"usize","parent":{"krate":0,"index":165},"children":[],"decl_id":null,"docs":" The length of a URN [`Uuid`] string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":97056,"byte_end":97069,"line_start":776,"line_end":776,"column_start":18,"column_end":31},"name":"from_uuid_ref","qualname":"<UrnRef>::from_uuid_ref","value":"fn (uuid: &'a Uuid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`UrnRef`] from a [`Uuid`] reference.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":98879,"byte_end":98891,"line_start":829,"line_end":829,"column_start":12,"column_end":24},"name":"encode_lower","qualname":"<UrnRef>::encode_lower","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as a lower-case URN string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":100758,"byte_end":100770,"line_start":882,"line_end":882,"column_start":12,"column_end":24},"name":"encode_upper","qualname":"<UrnRef>::encode_upper","value":"fn <'buf> (&self, buffer: &'buf mut [u8]) -> &'buf mut str","parent":null,"children":[],"decl_id":null,"docs":" Writes the [`Uuid`] as an upper-case URN string to\n `buffer`, and returns the subslice of the buffer that contains the\n encoded UUID.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":594},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":6733,"byte_end":6740,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"Builder","qualname":"::Builder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A builder struct for creating a UUID.","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":6664,"byte_end":6702,"line_start":221,"line_end":221,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":179},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":6812,"byte_end":6817,"line_start":226,"line_end":226,"column_start":10,"column_end":15},"name":"Bytes","qualname":"::Bytes","value":"[u8; 16]","parent":null,"children":[],"decl_id":null,"docs":" A 128-bit (16 byte) buffer containing the ID.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":600},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7002,"byte_end":7005,"line_start":232,"line_end":232,"column_start":5,"column_end":8},"name":"Nil","qualname":"::Version::Nil","value":"Version::Nil","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Special case for `nil` UUID.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":603},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7049,"byte_end":7052,"line_start":234,"line_end":234,"column_start":5,"column_end":8},"name":"Mac","qualname":"::Version::Mac","value":"Version::Mac","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Version 1: MAC address.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":605},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7093,"byte_end":7096,"line_start":236,"line_end":236,"column_start":5,"column_end":8},"name":"Dce","qualname":"::Version::Dce","value":"Version::Dce","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Version 2: DCE Security.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":607},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7133,"byte_end":7136,"line_start":238,"line_end":238,"column_start":5,"column_end":8},"name":"Md5","qualname":"::Version::Md5","value":"Version::Md5","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Version 3: MD5 hash.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":609},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7171,"byte_end":7177,"line_start":240,"line_end":240,"column_start":5,"column_end":11},"name":"Random","qualname":"::Version::Random","value":"Version::Random","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Version 4: Random.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":611},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7216,"byte_end":7220,"line_start":242,"line_end":242,"column_start":5,"column_end":9},"name":"Sha1","qualname":"::Version::Sha1","value":"Version::Sha1","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Version 5: SHA-1 hash.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":599},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":6949,"byte_end":6956,"line_start":230,"line_end":230,"column_start":10,"column_end":17},"name":"Version","qualname":"::Version","value":"Version::{Nil, Mac, Dce, Md5, Random, Sha1}","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":611}],"decl_id":null,"docs":" The version of the UUID, denoting the generating algorithm.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":6940,"byte_end":7224,"line_start":230,"line_end":243,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":621},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7388,"byte_end":7391,"line_start":249,"line_end":249,"column_start":5,"column_end":8},"name":"NCS","qualname":"::Variant::NCS","value":"Variant::NCS","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":" Reserved by the NCS for backward compatibility.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":624},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7464,"byte_end":7471,"line_start":251,"line_end":251,"column_start":5,"column_end":12},"name":"RFC4122","qualname":"::Variant::RFC4122","value":"Variant::RFC4122","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":" As described in the RFC4122 Specification (default).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":626},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7537,"byte_end":7546,"line_start":253,"line_end":253,"column_start":5,"column_end":14},"name":"Microsoft","qualname":"::Variant::Microsoft","value":"Variant::Microsoft","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":" Reserved by Microsoft for backward compatibility.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":628},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7593,"byte_end":7599,"line_start":255,"line_end":255,"column_start":5,"column_end":11},"name":"Future","qualname":"::Variant::Future","value":"Variant::Future","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":" Reserved for future expansion.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":620},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7316,"byte_end":7323,"line_start":247,"line_end":247,"column_start":10,"column_end":17},"name":"Variant","qualname":"::Variant","value":"Variant::{NCS, RFC4122, Microsoft, Future}","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628}],"decl_id":null,"docs":" The reserved variants of UUIDs.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7307,"byte_end":7603,"line_start":247,"line_end":256,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":637},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7747,"byte_end":7751,"line_start":261,"line_end":261,"column_start":12,"column_end":16},"name":"Uuid","qualname":"::Uuid","value":"","parent":null,"children":[],"decl_id":null,"docs":" A Universally Unique Identifier (UUID).\n","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7714,"byte_end":7734,"line_start":260,"line_end":260,"column_start":1,"column_end":21}},{"value":"structural_match","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7736,"byte_end":7759,"line_start":261,"line_end":261,"column_start":1,"column_end":24}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7736,"byte_end":7759,"line_start":261,"line_end":261,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":182},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7844,"byte_end":7857,"line_start":265,"line_end":265,"column_start":15,"column_end":28},"name":"NAMESPACE_DNS","qualname":"::Uuid::NAMESPACE_DNS","value":"Self","parent":{"krate":0,"index":181},"children":[],"decl_id":null,"docs":" UUID namespace for Domain Name System (DNS).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":183},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":8072,"byte_end":8085,"line_start":271,"line_end":271,"column_start":15,"column_end":28},"name":"NAMESPACE_OID","qualname":"::Uuid::NAMESPACE_OID","value":"Self","parent":{"krate":0,"index":181},"children":[],"decl_id":null,"docs":" UUID namespace for ISO Object Identifiers (OIDs).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":184},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":8303,"byte_end":8316,"line_start":277,"line_end":277,"column_start":15,"column_end":28},"name":"NAMESPACE_URL","qualname":"::Uuid::NAMESPACE_URL","value":"Self","parent":{"krate":0,"index":181},"children":[],"decl_id":null,"docs":" UUID namespace for Uniform Resource Locators (URLs).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":185},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":8533,"byte_end":8547,"line_start":283,"line_end":283,"column_start":15,"column_end":29},"name":"NAMESPACE_X500","qualname":"::Uuid::NAMESPACE_X500","value":"Self","parent":{"krate":0,"index":181},"children":[],"decl_id":null,"docs":" UUID namespace for X.500 Distinguished Names (DNs).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":8998,"byte_end":9009,"line_start":294,"line_end":294,"column_start":12,"column_end":23},"name":"get_variant","qualname":"<Uuid>::get_variant","value":"fn (&self) -> Option<Variant>","parent":null,"children":[],"decl_id":null,"docs":" Returns the variant of the UUID structure.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":9916,"byte_end":9931,"line_start":315,"line_end":315,"column_start":18,"column_end":33},"name":"get_version_num","qualname":"<Uuid>::get_version_num","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the version number of the UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":10135,"byte_end":10146,"line_start":322,"line_end":322,"column_start":12,"column_end":23},"name":"get_version","qualname":"<Uuid>::get_version","value":"fn (&self) -> Option<Version>","parent":null,"children":[],"decl_id":null,"docs":" Returns the version of the UUID.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":12395,"byte_end":12404,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"as_fields","qualname":"<Uuid>::as_fields","value":"fn (&self) -> (u32, u16, u16, &[u8; 8])","parent":null,"children":[],"decl_id":null,"docs":" Returns the four field values of the UUID in big-endian order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":13710,"byte_end":13722,"line_start":419,"line_end":419,"column_start":12,"column_end":24},"name":"to_fields_le","qualname":"<Uuid>::to_fields_le","value":"fn (&self) -> (u32, u16, u16, &[u8; 8])","parent":null,"children":[],"decl_id":null,"docs":" Returns the four field values of the UUID in little-endian order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":14879,"byte_end":14886,"line_start":455,"line_end":455,"column_start":12,"column_end":19},"name":"as_u128","qualname":"<Uuid>::as_u128","value":"fn (&self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Returns a 128bit value containing the UUID data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":16500,"byte_end":16510,"line_start":496,"line_end":496,"column_start":12,"column_end":22},"name":"to_u128_le","qualname":"<Uuid>::to_u128_le","value":"fn (&self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Returns a 128bit little-endian value containing the UUID data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":17448,"byte_end":17456,"line_start":516,"line_end":516,"column_start":18,"column_end":26},"name":"as_bytes","qualname":"<Uuid>::as_bytes","value":"fn (&self) -> &Bytes","parent":null,"children":[],"decl_id":null,"docs":" Returns an array of 16 octets containing the UUID data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":17549,"byte_end":17555,"line_start":521,"line_end":521,"column_start":12,"column_end":18},"name":"is_nil","qualname":"<Uuid>::is_nil","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if the UUID is nil.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":18436,"byte_end":18449,"line_start":551,"line_end":551,"column_start":18,"column_end":31},"name":"encode_buffer","qualname":"<Uuid>::encode_buffer","value":"fn () -> [u8; adapter::Urn::LENGTH]","parent":null,"children":[],"decl_id":null,"docs":" A buffer that can be used for `encode_...` calls, that is\n guaranteed to be long enough for any of the adapters.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs","byte_start":46070,"byte_end":46075,"line_start":12,"line_end":12,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs","byte_start":46570,"byte_end":46575,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs","byte_start":46936,"byte_end":46941,"line_start":51,"line_end":51,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":33841,"byte_end":33845,"line_start":21,"line_end":21,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":40652,"byte_end":40659,"line_start":284,"line_end":284,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":47871,"byte_end":47876,"line_start":31,"line_end":31,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":47999,"byte_end":48004,"line_start":37,"line_end":37,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":48120,"byte_end":48125,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":48492,"byte_end":48497,"line_start":57,"line_end":57,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs","byte_start":67395,"byte_end":67400,"line_start":79,"line_end":79,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs","byte_start":67789,"byte_end":67803,"line_start":90,"line_end":90,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs","byte_start":68082,"byte_end":68087,"line_start":99,"line_end":99,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs","byte_start":69531,"byte_end":69536,"line_start":148,"line_end":148,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs","byte_start":50494,"byte_end":50498,"line_start":51,"line_end":51,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73357,"byte_end":73361,"line_start":68,"line_end":68,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":76932,"byte_end":76942,"line_start":181,"line_end":181,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":80812,"byte_end":80825,"line_start":296,"line_end":296,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":84988,"byte_end":84994,"line_start":418,"line_end":418,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":88769,"byte_end":88778,"line_start":531,"line_end":531,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":92581,"byte_end":92584,"line_start":644,"line_end":644,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":96749,"byte_end":96755,"line_start":766,"line_end":766,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7768,"byte_end":7772,"line_start":263,"line_end":263,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":193},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":18552,"byte_end":18556,"line_start":556,"line_end":556,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":18710,"byte_end":18714,"line_start":563,"line_end":563,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":18853,"byte_end":18860,"line_start":569,"line_end":569,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":19211,"byte_end":19215,"line_start":580,"line_end":580,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":19376,"byte_end":19380,"line_start":586,"line_end":586,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":19555,"byte_end":19559,"line_start":593,"line_end":593,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":19714,"byte_end":19718,"line_start":601,"line_end":601,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":5097,"byte_end":5104,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":106}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs","byte_start":46070,"byte_end":46075,"line_start":12,"line_end":12,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs","byte_start":46570,"byte_end":46575,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":220},"to":{"krate":1,"index":7031}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/error.rs","byte_start":46936,"byte_end":46941,"line_start":51,"line_end":51,"column_start":27,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":220},"to":{"krate":4,"index":1542}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":33841,"byte_end":33845,"line_start":21,"line_end":21,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/builder/mod.rs","byte_start":40652,"byte_end":40659,"line_start":284,"line_end":284,"column_start":13,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":47871,"byte_end":47876,"line_start":31,"line_end":31,"column_start":31,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":235},"to":{"krate":1,"index":2103}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":47999,"byte_end":48004,"line_start":37,"line_end":37,"column_start":30,"column_end":35},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":235},"to":{"krate":1,"index":2103}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":48120,"byte_end":48125,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":235},"to":{"krate":1,"index":7031}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/error.rs","byte_start":48492,"byte_end":48497,"line_start":57,"line_end":57,"column_start":27,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":235},"to":{"krate":4,"index":1542}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs","byte_start":67395,"byte_end":67400,"line_start":79,"line_end":79,"column_start":6,"column_end":11},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs","byte_start":67789,"byte_end":67803,"line_start":90,"line_end":90,"column_start":23,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":298},"to":{"krate":1,"index":7031}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs","byte_start":68082,"byte_end":68087,"line_start":99,"line_end":99,"column_start":23,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":269},"to":{"krate":1,"index":7031}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/error.rs","byte_start":69531,"byte_end":69536,"line_start":148,"line_end":148,"column_start":27,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":269},"to":{"krate":4,"index":1542}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/parser/mod.rs","byte_start":50494,"byte_end":50498,"line_start":51,"line_end":51,"column_start":6,"column_end":10},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":73357,"byte_end":73361,"line_start":68,"line_end":68,"column_start":6,"column_end":10},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":76932,"byte_end":76942,"line_start":181,"line_end":181,"column_start":6,"column_end":16},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":80812,"byte_end":80825,"line_start":296,"line_end":296,"column_start":10,"column_end":23},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":84988,"byte_end":84994,"line_start":418,"line_end":418,"column_start":6,"column_end":12},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":88769,"byte_end":88778,"line_start":531,"line_end":531,"column_start":10,"column_end":19},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":430},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":92581,"byte_end":92584,"line_start":644,"line_end":644,"column_start":6,"column_end":9},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/adapter/mod.rs","byte_start":96749,"byte_end":96755,"line_start":766,"line_end":766,"column_start":10,"column_end":16},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":7768,"byte_end":7772,"line_start":263,"line_end":263,"column_start":6,"column_end":10},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":18552,"byte_end":18556,"line_start":556,"line_end":556,"column_start":21,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":637},"to":{"krate":1,"index":7029}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":18710,"byte_end":18714,"line_start":563,"line_end":563,"column_start":23,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":637},"to":{"krate":1,"index":7031}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":18853,"byte_end":18860,"line_start":569,"line_end":569,"column_start":23,"column_end":30},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":620},"to":{"krate":1,"index":7031}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":19211,"byte_end":19215,"line_start":580,"line_end":580,"column_start":24,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":637},"to":{"krate":1,"index":7037}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":19376,"byte_end":19380,"line_start":586,"line_end":586,"column_start":24,"column_end":28},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":637},"to":{"krate":1,"index":7039}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":19555,"byte_end":19559,"line_start":593,"line_end":593,"column_start":23,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":637},"to":{"krate":1,"index":6224}},{"span":{"file_name":"/home/ruanwenwen/.cargo/registry/src/github.com-1ecc6299db9ec823/uuid-0.8.2/src/lib.rs","byte_start":19714,"byte_end":19718,"line_start":601,"line_end":601,"column_start":18,"column_end":22},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":637},"to":{"krate":1,"index":2087}}]}